{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DATA301 Final Project","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"63N1JDmtufUn","executionInfo":{"status":"ok","timestamp":1654228745322,"user_tz":-720,"elapsed":24304,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"06d00375-cf50-4faa-e78e-dcbbe38048a1"},"outputs":[{"output_type":"stream","name":"stdout","text":["\r0% [Working]\r            \rHit:1 http://security.ubuntu.com/ubuntu bionic-security InRelease\n","\r0% [Connecting to archive.ubuntu.com (185.125.190.39)] [Connected to cloud.r-pr\r                                                                               \rHit:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease\n","Hit:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Hit:4 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease\n","Hit:5 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Ign:6 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Hit:7 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Hit:8 http://archive.ubuntu.com/ubuntu bionic-updates InRelease\n","Hit:9 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Hit:10 http://archive.ubuntu.com/ubuntu bionic-backports InRelease\n","Hit:11 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease\n","Hit:12 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease\n","Reading package lists... Done\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: gdelt in /usr/local/lib/python3.7/dist-packages (0.1.10.5.3)\n","Requirement already satisfied: pandas>=0.20.3 in /usr/local/lib/python3.7/dist-packages (from gdelt) (1.3.5)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from gdelt) (1.21.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from gdelt) (2.23.0)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from gdelt) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.20.3->gdelt) (2022.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil->gdelt) (1.15.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->gdelt) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->gdelt) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->gdelt) (2022.5.18.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->gdelt) (2.10)\n"]}],"source":["!apt-get update\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","!pip install -q pyspark\n","import pyspark, os\n","from pyspark import SparkConf, SparkContext\n","os.environ[\"PYSPARK_PYTHON\"]=\"python3\"\n","os.environ[\"JAVA_HOME\"]=\"/usr/lib/jvm/java-8-openjdk-amd64/\"\n","\n","!pip install gdelt"]},{"cell_type":"code","source":["#start spark local server\n","import sys, os\n","from operator import add\n","import time\n","\n","os.environ[\"PYSPARK_PYTHON\"]=\"python3\"\n","\n","import pyspark\n","from pyspark import SparkConf, SparkContext\n","\n","#connects our python driver to a local Spark JVM running on the Google Colab server virtual machine\n","try:\n","  conf = SparkConf().setMaster(\"local[*]\").set(\"spark.executor.memory\", \"1g\")\n","  sc = SparkContext(conf = conf)\n","except ValueError:\n","  #it's ok if the server is already started\n","  pass\n","\n","def dbg(x):\n","  \"\"\" A helper function to print debugging information on RDDs \"\"\"\n","  if isinstance(x, pyspark.RDD):\n","    print([(t[0], list(t[1]) if \n","            isinstance(t[1], pyspark.resultiterable.ResultIterable) else t[1])\n","           if isinstance(t, tuple) else t\n","           for t in x.take(100)])\n","  else:\n","    print(x)"],"metadata":{"id":"ltGc42rC-uIT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Attempting to get data using GDELT 2.0 with Crypto/Bitcoin as keywords\n","\n","\n","Searching through the data set that was provided from gdelt 2.0, it seems to not contain any data that is related to bitcoin (empty sets), so I instead went back to using GDELT summary to retrieved Bitcoin/Ethereum data sets (Volume and Tone) "],"metadata":{"id":"51oJtR7B1q6Z"}},{"cell_type":"code","source":["from concurrent.futures import ProcessPoolExecutor\n","from datetime import date, timedelta\n","import pandas as pd\n","import gdelt\n","import os\n","\n","# set up gdeltpyr for version 2\n","gd = gdelt.gdelt(version=2)\n","\n","# multiprocess the query\n","e = ProcessPoolExecutor()\n","\n","\n","# generic functions to pull and write data to disk based on date\n","def get_filename(x):\n","  date = x.strftime('%Y%m%d')\n","  return \"{}_gdeltdata.csv\".format(date)\n","\n","def intofile(filename):\n","    try:\n","        if not os.path.exists(filename):\n","          date = filename.split(\"_\")[0]\n","          d = gd.Search(date, table='events',coverage=False) #not updata at 15mins\n","          d.to_csv(filename,encoding='utf-8',index=False)\n","    except:\n","        print(\"Error occurred\")\n","\n","# pull the data from gdelt into multi files; this may take a long time\n","CovidBefore = [get_filename(x) for x in pd.date_range('2019 Nov 1','2020 Jan 31')]\n","CovidAfter = [get_filename(x) for x in pd.date_range('2020 May 1','2020 Jul 31')]\n","\n","results = list(e.map(intofile,CovidBefore+CovidAfter))"],"metadata":{"id":"JOJmf5Ml3KBS","executionInfo":{"status":"ok","timestamp":1654228781046,"user_tz":-720,"elapsed":30336,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b300cea6-5f3f-4f4a-d769-93142ffd585a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n","/usr/local/lib/python3.7/dist-packages/gdelt/base.py:617: FutureWarning: The warn_bad_lines argument has been deprecated and will be removed in a future version.\n","\n","\n","  results = eventWork(self.download_list)\n"]}]},{"cell_type":"code","source":["from pyspark.sql import SQLContext\n","sqlContext = SQLContext(sc)\n","\n","data_covidbefore = sqlContext.read.option(\"header\", \"true\").csv(CovidBefore)\n","data_covidafter = sqlContext.read.option(\"header\", \"true\").csv(CovidAfter)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KmagP8Tz3KNd","executionInfo":{"status":"ok","timestamp":1654228795414,"user_tz":-720,"elapsed":14380,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"26e23eac-5964-4bf2-f2e3-3bee14cf0826"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pyspark/sql/context.py:79: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n","  FutureWarning\n"]}]},{"cell_type":"code","source":["countries = [\"USA\", \"NZL\", \"CAN\", \"GER\", \"SGP\"] #List of countries for GDELT 2.0"],"metadata":{"id":"jWQUHnBv012Q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Event codes categorised into positive, neutral, and negative events.\n","neutral_events = ['011', '019', '020', '024', '0241', '0242', '025', '0253', \n","                  '0341', '0342', '0343', '0344', '035', '040', '041', '042',\n","                  '043', '044', '045', '046', '080', '083', '0831', '0832', '0833',\n","                  '0834', '084', '0841', '0842', '090', '091', '092', '093',\n","                  '094', '100', '104', '1041', '1042', '1043', '1044', '105', \n","                  '106', '107', '108', '110', '123', '1231', '1232', '1233', \n","                  '1234', '124', '125', '126', '127', '128', '129', '140', \n","                  '141', '1411', '1412', '1413', '1414', '150', '160', '166', '170']\n","\n","\n","negative_events = ['012', '016', '111', '112', '1121', '1122', '1123', '1124',\n","                   '1125', '113', '115', '116', '120', '121', '1211', '1212', \n","                   '122', '1221', '1222', '1223', '1224', '1241', '1242',\n","                   '1243', '1244', '1245', '1246', '130', '131', '1311', \n","                   '1312', '1313', '132', '1321', '1322', '1323', '1324', \n","                   '133', '134', '135', '136', '137', '1381', '138114', \n","                   '1382', '1383', '1384', '1385', '139', '142', '1421', \n","                   '1422', '1423', '1424', '143', '1431', '1432', '1433', \n","                   '1434', '144', '1441', '1442', '1443', '1444', '145', \n","                   '1451', '1452', '1453', '1454', '161', '162', '1621', \n","                   '1622', '1623', '163', '164', '165', '1661', '1662', \n","                   '1663', '171', '1711', '1712', '172', '1721', '1722', \n","                   '1723', '1724', '173', '174', '175', '176', '180', '181', \n","                   '182', '1821', '1822', '1823', '183', '1831', '1832', \n","                   '1833', '1834', '184', '185', '186', '190195', '191', \n","                   '192', '193', '194', '1951', '1952', '196', '200', '201',\n","                   '202', '203', '204', '2041', '2042']\n","\n","\n","positive_events = ['013', '014', '015', '017', '018', '021', '0211', '0212',\n","                   '0213', '0214', '022', '022', '023', '0231', '0232', '0233',\n","                   '0234', '0243', '0244', '0251', '0252', '0254', '0255', \n","                   '0256', '026', '027', '028', '030', '031', '0311', '0312',\n","                   '0313', '0314', '032', '032', '033', '0331', '0332', '0333', \n","                   '0334', '034', '0351', '0352', '0353', '0354', '0355', '0356', \n","                   '036', '037', '038', '039', '050', '051', '052', '053', \n","                   '054', '055', '056', '057', '060', '061', '062', '063',\n","                   '064', '070', '071', '072', '073', '074', '075', '081', \n","                   '0811', '0812', '0813', '0814', '082', '085', '086', '0861',\n","                   '0862', '0863', '087', '0871', '0872', '0873', '0874',\n","                   '101', '1011', '1012', '1013', '1014', '102', '103', '1031',\n","                   '1032', '1033', '1034', '1051', '1052', '1053', '1054', \n","                   '1055', '1056', '150', '151', '152', '153', '154', '155']\n","\n","def event_sign(x):\n","  if x in positive_events:\n","    return \"Positive\"\n","  elif x in neutral_events:\n","    return \"Neutral\"\n","  elif x in negative_events:\n","    return \"Negative\"\n","  else:\n","    return \"No Outcome\""],"metadata":{"id":"2yHhe2f91qnI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_crypto_data(x, y):\n","  crypto = x.rdd.map(lambda row: ((row['Actor1CountryCode'], event_sign(row['EventCode']), row['CAMEOCodeDescription']), 1))\n","  crypto = crypto.filter(lambda x: x[0][0] is not None)\n","  crypto = crypto.filter(lambda x: \"bitcoin\" in x[0][0][2].lower().split())\n","  dbg(crypto)\n","\n","bitcoin_before = get_crypto_data(data_covidbefore, countries)\n","bitcoin_after = get_crypto_data(data_covidafter, countries)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0P5ClMS2rX7","executionInfo":{"status":"ok","timestamp":1654228815156,"user_tz":-720,"elapsed":19770,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"4588b38f-0934-4187-dedc-e018bf62471d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n","[]\n"]}]},{"cell_type":"markdown","source":["#Getting data from GDELT Summary for Bitcoin and Ethereum\n","**I have decided to go back to using GDELT Summary to get the Volume and Tone of BTC and ETH and do a consine similarity, as i could not get any data using GDELT 2.0 as shown in the code section above**"],"metadata":{"id":"XEQbQakl8WLu"}},{"cell_type":"code","source":["!rm -rf articles\n","!rm *.csv"],"metadata":{"id":"mf95Cmt8kP5L","executionInfo":{"status":"ok","timestamp":1654228828056,"user_tz":-720,"elapsed":392,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"10b70983-ec1e-4ffa-a593-7728db1fcce7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["rm: cannot remove '*.csv': No such file or directory\n"]}]},{"cell_type":"code","source":["\n","BTCvolumebefore = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&startdatetime=20191101000000&enddatetime=20200131235959&query=bitcoin%20crypto&mode=timelinevol&timezoom=yes\"\n","BTCvolumeafter = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&startdatetime=20200501000000&enddatetime=20200731235959&query=bitcoin%20crypto&mode=timelinevol&timezoom=yes\"\n","BTCtonebefore = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&query=bitcoin%20crypto&mode=timelinetone&timespan=FULL&timezoom=yes\"\n","BTCtoneafter = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&query=bitcoin%20crypto&mode=timelinetone&timespan=FULL&timezoom=yes\"\n","\n","ETHvolumebefore = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&startdatetime=20191101000000&enddatetime=20200131235959&query=ethereum%20crypto&mode=timelinevol&timezoom=yes\"\n","ETHvolumeafter = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&startdatetime=20200501000000&enddatetime=20200731235959&query=ethereum%20crypto&mode=timelinevol&timezoom=yes\"\n","ETHtonebefore = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&query=ethereum%20crypto&mode=timelinetone&timespan=FULL&timezoom=yes\"\n","ETHtoneafter = \"https://api.gdeltproject.org/api/v2/doc/doc?format=csv&query=ethereum%20crypto&mode=timelinetone&timespan=FULL&timezoom=yes\"\n"],"metadata":{"id":"QZUSZtPRDqk4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Download the files manually\n","\n","# print(BTCvolumebefore)\n","# print(\"-----\")\n","# print(BTCvolumeafter)\n","# print(\"-----\")\n","# print(BTCtonebefore)\n","# print(\"-----\")\n","# print(BTCtoneafter)\n","# print(\"-----\")\n","# print(\"-----\")\n","# print(ETHvolumebefore)\n","# print(\"-----\")\n","# print(ETHvolumeafter)\n","# print(\"-----\")\n","# print(ETHtonebefore)\n","# print(\"-----\")\n","# print(ETHtoneafter)"],"metadata":{"id":"rE9BWZcmhrvO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","from pyspark.sql import SQLContext\n","sqlContext = SQLContext(sc)\n","\n","#IMPORTANT!! upload all files that was provided in the google drive manually to be able to run the next batch of codes\n","\n","BTC_Volumeafterdata = sqlContext.read.option(\"header\", \"true\").csv(\"BitcoinVolumeAfter.csv\")\n","BTC_Volumebeforedata = sqlContext.read.option(\"header\", \"true\").csv(\"BitcoinVolumeBefore.csv\")\n","BTC_Tonebeforedata = pd.read_csv(\"BTCToneBefore.csv\")\n","BTC_Toneafterdata = pd.read_csv(\"BTCToneAfter.csv\")\n","\n","ETH_Volumeafterdata = sqlContext.read.option(\"header\", \"true\").csv(\"ETHVolumeAfter.csv\")\n","ETH_Volumebeforedata = sqlContext.read.option(\"header\", \"true\").csv(\"ETHVolumeBefore.csv\")\n","ETH_Tonebeforedata = pd.read_csv(\"ETHToneBefore.csv\")\n","ETH_Toneafterdata = pd.read_csv(\"ETHToneAfter.csv\")\n","\n","# dbg(BTC_Volumeafterdata)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"04347MPb7ReW","executionInfo":{"status":"ok","timestamp":1654228845333,"user_tz":-720,"elapsed":1281,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"f09de64c-2978-4507-baa3-2f7d47e1d1c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pyspark/sql/context.py:79: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n","  FutureWarning\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from pyspark.sql import SparkSession\n","import pandas as pd\n","\n","#Create PySpark SparkSession\n","spark = SparkSession.builder \\\n","    .master(\"local[1]\") \\\n","    .appName(\"SparkByExamples.com\") \\\n","    .getOrCreate()\n","\n","def BeforeTone_Summary(x):\n","  crypto = x.loc[('2019-11-01' == x['Date']).idxmax(): ('2020-01-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Date'], row['Value']))\n","  return crypto\n","\n","\n","def AfterTone_Summary(x):\n","  crypto = x.loc[('2020-05-01' == x['Date']).idxmax(): ('2020-07-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Date'], row['Value']))\n","  return crypto\n","\n","\n","def BeforeTone_Value(x):\n","  crypto = x.loc[('2019-11-01' == x['Date']).idxmax(): ('2020-01-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Value']))\n","  return crypto\n","  \n","\n","def AfterTone_Value(x):\n","  crypto = x.loc[('2020-05-01' == x['Date']).idxmax(): ('2020-07-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Value']))\n","  return crypto\n"],"metadata":{"id":"KSpSmrZhGnY8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["BTCVolumeB = BTC_Volumebeforedata.rdd.map(lambda row: (row['Date'], row['Value']))\n","print(\"BTC Volume Before\")\n","dbg(BTCVolumeB)\n","BTCVolumeA = BTC_Volumeafterdata.rdd.map(lambda row: (row['Date'], row['Value']))\n","print(\"BTC Volume After\")\n","dbg(BTCVolumeA)\n","print(\"-\"*20)\n","print(\"BTC Tone Before\")\n","BTCToneB = BeforeTone_Summary(BTC_Tonebeforedata)\n","dbg(BTCToneB)\n","print(\"BTC Tone After\")\n","BTCToneA = AfterTone_Summary(BTC_Toneafterdata)\n","dbg(BTCToneA)\n","print(\"-\"*20)\n","ETHVolumeB = ETH_Volumebeforedata.rdd.map(lambda row: (row['Date'], row['Value']))\n","print(\"ETH Volume Before\")\n","dbg(ETHVolumeB)\n","ETHVolumeA = ETH_Volumeafterdata.rdd.map(lambda row: (row['Date'], row['Value']))\n","print(\"ETH Volume Before\")\n","dbg(ETHVolumeA)\n","print(\"-\"*20)\n","print(\"ETH Tone Before\")\n","ETHToneB = BeforeTone_Summary(ETH_Tonebeforedata)\n","dbg(ETHToneB)\n","print(\"ETH Tone After\")\n","ETHToneA = AfterTone_Summary(ETH_Toneafterdata)\n","dbg(ETHToneA)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-UEXX7Cf-NVl","executionInfo":{"status":"ok","timestamp":1654228855113,"user_tz":-720,"elapsed":1878,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"7ec42c05-0900-484c-cee1-11043bb40409"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BTC Volume Before\n","[('2019-11-01', '0.0446'), ('2019-11-02', '0.0602'), ('2019-11-03', '0.071'), ('2019-11-04', '0.0648'), ('2019-11-05', '0.0616'), ('2019-11-06', '0.0551'), ('2019-11-07', '0.0456'), ('2019-11-08', '0.0484'), ('2019-11-09', '0.0417'), ('2019-11-10', '0.0569'), ('2019-11-11', '0.0385'), ('2019-11-12', '0.0406'), ('2019-11-13', '0.0289'), ('2019-11-14', '0.0257'), ('2019-11-15', '0.0314'), ('2019-11-16', '0.0283'), ('2019-11-17', '0.02'), ('2019-11-18', '0.0284'), ('2019-11-19', '0.0209'), ('2019-11-20', '0.0369'), ('2019-11-21', '0.0543'), ('2019-11-22', '0.0666'), ('2019-11-23', '0.0211'), ('2019-11-24', '0.0222'), ('2019-11-25', '0.0235'), ('2019-11-26', '0.0307'), ('2019-11-27', '0.0276'), ('2019-11-28', '0.0264'), ('2019-11-29', '0.0208'), ('2019-11-30', '0.022'), ('2019-12-01', '0.0149'), ('2019-12-02', '0.026'), ('2019-12-03', '0.0234'), ('2019-12-04', '0.0184'), ('2019-12-05', '0.019'), ('2019-12-06', '0.0222'), ('2019-12-07', '0.017'), ('2019-12-08', '0.0137'), ('2019-12-09', '0.0221'), ('2019-12-10', '0.0303'), ('2019-12-11', '0.0327'), ('2019-12-12', '0.024'), ('2019-12-13', '0.0213'), ('2019-12-14', '0.0224'), ('2019-12-15', '0.0208'), ('2019-12-16', '0.0262'), ('2019-12-17', '0.0231'), ('2019-12-18', '0.0282'), ('2019-12-19', '0.0266'), ('2019-12-20', '0.021'), ('2019-12-21', '0.0164'), ('2019-12-22', '0.0155'), ('2019-12-23', '0.0354'), ('2019-12-24', '0.0319'), ('2019-12-25', '0.0262'), ('2019-12-26', '0.0319'), ('2019-12-27', '0.0248'), ('2019-12-28', '0.0355'), ('2019-12-29', '0.0184'), ('2019-12-30', '0.0305'), ('2019-12-31', '0.0205'), ('2020-01-01', '0.0183'), ('2020-01-02', '0.0188'), ('2020-01-03', '0.0216'), ('2020-01-04', '0.0203'), ('2020-01-05', '0.0166'), ('2020-01-06', '0.0573'), ('2020-01-07', '0.0297'), ('2020-01-08', '0.0345'), ('2020-01-09', '0.0228'), ('2020-01-10', '0.0178'), ('2020-01-11', '0.0151'), ('2020-01-12', '0.016'), ('2020-01-13', '0.0313'), ('2020-01-14', '0.0283'), ('2020-01-15', '0.0329'), ('2020-01-16', '0.0349'), ('2020-01-17', '0.0252'), ('2020-01-18', '0.014'), ('2020-01-19', '0.0129'), ('2020-01-20', '0.023'), ('2020-01-21', '0.019'), ('2020-01-22', '0.0171'), ('2020-01-23', '0.0207'), ('2020-01-24', '0.0201'), ('2020-01-25', '0.0144'), ('2020-01-26', '0.0172'), ('2020-01-27', '0.0221'), ('2020-01-28', '0.0321'), ('2020-01-29', '0.0289'), ('2020-01-30', '0.0189'), ('2020-01-31', '0.018')]\n","BTC Volume After\n","[('2020-05-01', '0.0212'), ('2020-05-02', '0.0283'), ('2020-05-03', '0.013'), ('2020-05-04', '0.0173'), ('2020-05-05', '0.0192'), ('2020-05-06', '0.0165'), ('2020-05-07', '0.0197'), ('2020-05-08', '0.0478'), ('2020-05-09', '0.0354'), ('2020-05-10', '0.0174'), ('2020-05-11', '0.0358'), ('2020-05-12', '0.031'), ('2020-05-13', '0.0235'), ('2020-05-14', '0.0168'), ('2020-05-15', '0.0197'), ('2020-05-16', '0.0167'), ('2020-05-17', '0.0188'), ('2020-05-18', '0.0294'), ('2020-05-19', '0.0207'), ('2020-05-20', '0.0211'), ('2020-05-21', '0.0199'), ('2020-05-22', '0.02'), ('2020-05-23', '0.017'), ('2020-05-24', '0.0135'), ('2020-05-25', '0.0254'), ('2020-05-26', '0.0269'), ('2020-05-27', '0.0197'), ('2020-05-28', '0.019'), ('2020-05-29', '0.0183'), ('2020-05-30', '0.0117'), ('2020-05-31', '0.0114'), ('2020-06-01', '0.0233'), ('2020-06-02', '0.0288'), ('2020-06-03', '0.0226'), ('2020-06-04', '0.0265'), ('2020-06-05', '0.0194'), ('2020-06-06', '0.0178'), ('2020-06-07', '0.0159'), ('2020-06-08', '0.0167'), ('2020-06-09', '0.0225'), ('2020-06-10', '0.0304'), ('2020-06-11', '0.0301'), ('2020-06-12', '0.0296'), ('2020-06-13', '0.0218'), ('2020-06-14', '0.0398'), ('2020-06-15', '0.0227'), ('2020-06-16', '0.0187'), ('2020-06-17', '0.018'), ('2020-06-18', '0.0187'), ('2020-06-19', '0.016'), ('2020-06-20', '0.0104'), ('2020-06-21', '0.0148'), ('2020-06-22', '0.0247'), ('2020-06-23', '0.0211'), ('2020-06-24', '0.0219'), ('2020-06-25', '0.0249'), ('2020-06-26', '0.0208'), ('2020-06-27', '0.017'), ('2020-06-28', '0.0227'), ('2020-06-29', '0.0191'), ('2020-06-30', '0.0341'), ('2020-07-01', '0.019'), ('2020-07-02', '0.0212'), ('2020-07-03', '0.0159'), ('2020-07-04', '0.0171'), ('2020-07-05', '0.0171'), ('2020-07-06', '0.021'), ('2020-07-07', '0.0314'), ('2020-07-08', '0.0197'), ('2020-07-09', '0.0181'), ('2020-07-10', '0.0238'), ('2020-07-11', '0.0214'), ('2020-07-12', '0.0166'), ('2020-07-13', '0.02'), ('2020-07-14', '0.021'), ('2020-07-15', '0.049'), ('2020-07-16', '0.1233'), ('2020-07-17', '0.0328'), ('2020-07-18', '0.1047'), ('2020-07-19', '0.0192'), ('2020-07-20', '0.0291'), ('2020-07-21', '0.0181'), ('2020-07-22', '0.0197'), ('2020-07-23', '0.0244'), ('2020-07-24', '0.0178'), ('2020-07-25', '0.0179'), ('2020-07-26', '0.0291'), ('2020-07-27', '0.0225'), ('2020-07-28', '0.0324'), ('2020-07-29', '0.021'), ('2020-07-30', '0.0217'), ('2020-07-31', '0.025')]\n","--------------------\n","BTC Tone Before\n","[('2019-11-01', 0.1869), ('2019-11-02', 0.4686), ('2019-11-03', -0.0367), ('2019-11-04', -0.028), ('2019-11-05', 0.0223), ('2019-11-06', -0.012), ('2019-11-07', 0.6447), ('2019-11-08', 0.5647), ('2019-11-09', 0.6272), ('2019-11-10', 0.4881), ('2019-11-11', 0.4487), ('2019-11-12', 0.5059), ('2019-11-13', 0.3229), ('2019-11-14', 0.1248), ('2019-11-15', -0.1253), ('2019-11-16', -0.2404), ('2019-11-17', -0.1614), ('2019-11-18', 0.6151), ('2019-11-19', 0.4726), ('2019-11-20', 0.2537), ('2019-11-21', 0.262), ('2019-11-22', -0.6548), ('2019-11-23', -0.6698), ('2019-11-24', -0.0152), ('2019-11-25', -0.9297), ('2019-11-26', -0.1907), ('2019-11-27', 0.1569), ('2019-11-28', -0.1918), ('2019-11-29', -0.3015), ('2019-11-30', -0.6956), ('2019-12-01', -0.3624), ('2019-12-02', 0.3059), ('2019-12-03', 0.6877), ('2019-12-04', 0.3088), ('2019-12-05', 0.2547), ('2019-12-06', 0.1062), ('2019-12-07', -0.922), ('2019-12-08', -0.7711), ('2019-12-09', 0.7468), ('2019-12-10', 0.3105), ('2019-12-11', -1.0269), ('2019-12-12', 1.0177), ('2019-12-13', -0.5668), ('2019-12-14', -0.3573), ('2019-12-15', -0.2182), ('2019-12-16', -1.0505), ('2019-12-17', -0.3534), ('2019-12-18', -0.4203), ('2019-12-19', -0.3266), ('2019-12-20', -0.0801), ('2019-12-21', -0.4091), ('2019-12-22', -1.1694), ('2019-12-23', -0.1494), ('2019-12-24', 0.4802), ('2019-12-25', -0.2779), ('2019-12-26', -0.6058), ('2019-12-27', -0.4913), ('2019-12-28', 0.0577), ('2019-12-29', -0.9014), ('2019-12-30', -0.7845), ('2019-12-31', -0.9824), ('2020-01-01', 0.2568), ('2020-01-02', -0.2366), ('2020-01-03', -0.352), ('2020-01-04', -0.5597), ('2020-01-05', -0.3315), ('2020-01-06', -0.7986), ('2020-01-07', 0.2418), ('2020-01-08', 0.2045), ('2020-01-09', 0.5152), ('2020-01-10', -0.0811), ('2020-01-11', 0.3183), ('2020-01-12', 0.1546), ('2020-01-13', 0.3832), ('2020-01-14', 0.2009), ('2020-01-15', 0.8385), ('2020-01-16', -0.7432), ('2020-01-17', -0.1759), ('2020-01-18', -0.354), ('2020-01-19', 0.1103), ('2020-01-20', -0.2503), ('2020-01-21', -0.0063), ('2020-01-22', 0.5778), ('2020-01-23', 0.4), ('2020-01-24', 0.4224), ('2020-01-25', -0.608), ('2020-01-26', -0.5535), ('2020-01-27', -0.417), ('2020-01-28', 0.0002), ('2020-01-29', 0.1412), ('2020-01-30', 0.2389), ('2020-01-31', 0.1983)]\n","BTC Tone After\n","[('2020-05-01', 0.4852), ('2020-05-02', 0.8262), ('2020-05-03', 0.7438), ('2020-05-04', -0.7068), ('2020-05-05', 1.1457), ('2020-05-06', 0.7595), ('2020-05-07', 0.5387), ('2020-05-08', 0.6226), ('2020-05-09', 1.238), ('2020-05-10', -1.0679), ('2020-05-11', -0.504), ('2020-05-12', 0.2032), ('2020-05-13', 1.0953), ('2020-05-14', 0.2903), ('2020-05-15', -0.3546), ('2020-05-16', -0.0374), ('2020-05-17', -1.0781), ('2020-05-18', 0.797), ('2020-05-19', 0.0632), ('2020-05-20', -0.0455), ('2020-05-21', -0.3013), ('2020-05-22', -0.4272), ('2020-05-23', -0.3728), ('2020-05-24', -0.9223), ('2020-05-25', 0.2003), ('2020-05-26', 0.995), ('2020-05-27', 0.4573), ('2020-05-28', 0.4712), ('2020-05-29', 0.7427), ('2020-05-30', -0.436), ('2020-05-31', -0.8716), ('2020-06-01', -0.035), ('2020-06-02', -0.8599), ('2020-06-03', -0.4204), ('2020-06-04', -0.9137), ('2020-06-05', -0.3488), ('2020-06-06', -0.2396), ('2020-06-07', -0.4961), ('2020-06-08', -0.5175), ('2020-06-09', 0.1652), ('2020-06-10', 0.451), ('2020-06-11', 0.7544), ('2020-06-12', -0.5256), ('2020-06-13', 0.4492), ('2020-06-14', 0.2979), ('2020-06-15', -0.3846), ('2020-06-16', 0.3799), ('2020-06-17', -0.1459), ('2020-06-18', 0.4504), ('2020-06-19', -0.1574), ('2020-06-20', -0.3069), ('2020-06-21', -0.6366), ('2020-06-22', -0.1203), ('2020-06-23', 0.6547), ('2020-06-24', -0.0217), ('2020-06-25', 1.3017), ('2020-06-26', -0.5124), ('2020-06-27', -0.8244), ('2020-06-28', 0.2399), ('2020-06-29', -0.7081), ('2020-06-30', 0.0619), ('2020-07-01', 0.3073), ('2020-07-02', 0.4096), ('2020-07-03', -1.2207), ('2020-07-04', 0.1088), ('2020-07-05', -0.091), ('2020-07-06', -0.0905), ('2020-07-07', 1.0197), ('2020-07-08', 0.2818), ('2020-07-09', -0.834), ('2020-07-10', 0.817), ('2020-07-11', 0.8128), ('2020-07-12', -0.9072), ('2020-07-13', -0.7299), ('2020-07-14', 0.3027), ('2020-07-15', -1.9204), ('2020-07-16', -3.3072), ('2020-07-17', -1.323), ('2020-07-18', -3.9835), ('2020-07-19', -2.4894), ('2020-07-20', -0.3984), ('2020-07-21', -0.5839), ('2020-07-22', -0.4153), ('2020-07-23', -1.6334), ('2020-07-24', -0.6094), ('2020-07-25', -0.1156), ('2020-07-26', 0.5617), ('2020-07-27', 0.565), ('2020-07-28', 1.5408), ('2020-07-29', 0.7509), ('2020-07-30', 0.6693), ('2020-07-31', -0.8462)]\n","--------------------\n","ETH Volume Before\n","[('2019-11-01', '0.0122'), ('2019-11-02', '0.0054'), ('2019-11-03', '0.0066'), ('2019-11-04', '0.006'), ('2019-11-05', '0.0109'), ('2019-11-06', '0.0104'), ('2019-11-07', '0.0064'), ('2019-11-08', '0.0078'), ('2019-11-09', '0.0038'), ('2019-11-10', '0.0064'), ('2019-11-11', '0.0103'), ('2019-11-12', '0.0068'), ('2019-11-13', '0.0068'), ('2019-11-14', '0.0083'), ('2019-11-15', '0.01'), ('2019-11-16', '0.009'), ('2019-11-17', '0.0055'), ('2019-11-18', '0.0091'), ('2019-11-19', '0.006'), ('2019-11-20', '0.0076'), ('2019-11-21', '0.0098'), ('2019-11-22', '0.008'), ('2019-11-23', '0.0025'), ('2019-11-24', '0.0047'), ('2019-11-25', '0.0077'), ('2019-11-26', '0.0065'), ('2019-11-27', '0.0057'), ('2019-11-28', '0.0065'), ('2019-11-29', '0.0069'), ('2019-11-30', '0.0069'), ('2019-12-01', '0.0081'), ('2019-12-02', '0.012'), ('2019-12-03', '0.0089'), ('2019-12-04', '0.0086'), ('2019-12-05', '0.0079'), ('2019-12-06', '0.0066'), ('2019-12-07', '0.0055'), ('2019-12-08', '0.0039'), ('2019-12-09', '0.0065'), ('2019-12-10', '0.0082'), ('2019-12-11', '0.0106'), ('2019-12-12', '0.0071'), ('2019-12-13', '0.0078'), ('2019-12-14', '0.0066'), ('2019-12-15', '0.0078'), ('2019-12-16', '0.0085'), ('2019-12-17', '0.0129'), ('2019-12-18', '0.0095'), ('2019-12-19', '0.0091'), ('2019-12-20', '0.0084'), ('2019-12-21', '0.0075'), ('2019-12-22', '0.0061'), ('2019-12-23', '0.0115'), ('2019-12-24', '0.0039'), ('2019-12-25', '0.0087'), ('2019-12-26', '0.008'), ('2019-12-27', '0.0076'), ('2019-12-28', '0.0106'), ('2019-12-29', '0.0084'), ('2019-12-30', '0.0154'), ('2019-12-31', '0.0064'), ('2020-01-01', '0.0061'), ('2020-01-02', '0.0072'), ('2020-01-03', '0.0089'), ('2020-01-04', '0.0048'), ('2020-01-05', '0.007'), ('2020-01-06', '0.0424'), ('2020-01-07', '0.0128'), ('2020-01-08', '0.0089'), ('2020-01-09', '0.0087'), ('2020-01-10', '0.0064'), ('2020-01-11', '0.0032'), ('2020-01-12', '0.0068'), ('2020-01-13', '0.0085'), ('2020-01-14', '0.0068'), ('2020-01-15', '0.0103'), ('2020-01-16', '0.0084'), ('2020-01-17', '0.0093'), ('2020-01-18', '0.0034'), ('2020-01-19', '0.0052'), ('2020-01-20', '0.0074'), ('2020-01-21', '0.0052'), ('2020-01-22', '0.0068'), ('2020-01-23', '0.0089'), ('2020-01-24', '0.0059'), ('2020-01-25', '0.0055'), ('2020-01-26', '0.008'), ('2020-01-27', '0.0044'), ('2020-01-28', '0.0086'), ('2020-01-29', '0.0092'), ('2020-01-30', '0.0089'), ('2020-01-31', '0.0072')]\n","ETH Volume Before\n","[('2020-05-01', '0.0055'), ('2020-05-02', '0.0034'), ('2020-05-03', '0.0045'), ('2020-05-04', '0.0051'), ('2020-05-05', '0.0023'), ('2020-05-06', '0.0024'), ('2020-05-07', '0.0068'), ('2020-05-08', '0.0092'), ('2020-05-09', '0.0138'), ('2020-05-10', '0.0026'), ('2020-05-11', '0.0045'), ('2020-05-12', '0.0063'), ('2020-05-13', '0.0078'), ('2020-05-14', '0.0034'), ('2020-05-15', '0.0065'), ('2020-05-16', '0.004'), ('2020-05-17', '0.0045'), ('2020-05-18', '0.0094'), ('2020-05-19', '0.0045'), ('2020-05-20', '0.0042'), ('2020-05-21', '0.0067'), ('2020-05-22', '0.0081'), ('2020-05-23', '0.0042'), ('2020-05-24', '0.0052'), ('2020-05-25', '0.0078'), ('2020-05-26', '0.0089'), ('2020-05-27', '0.0055'), ('2020-05-28', '0.006'), ('2020-05-29', '0.0105'), ('2020-05-30', '0.0037'), ('2020-05-31', '0.0074'), ('2020-06-01', '0.0074'), ('2020-06-02', '0.0064'), ('2020-06-03', '0.0062'), ('2020-06-04', '0.005'), ('2020-06-05', '0.0045'), ('2020-06-06', '0.0051'), ('2020-06-07', '0.0057'), ('2020-06-08', '0.005'), ('2020-06-09', '0.0056'), ('2020-06-10', '0.0107'), ('2020-06-11', '0.0105'), ('2020-06-12', '0.0069'), ('2020-06-13', '0.0048'), ('2020-06-14', '0.015'), ('2020-06-15', '0.0069'), ('2020-06-16', '0.0041'), ('2020-06-17', '0.0067'), ('2020-06-18', '0.0057'), ('2020-06-19', '0.0063'), ('2020-06-20', '0.0044'), ('2020-06-21', '0.0064'), ('2020-06-22', '0.0077'), ('2020-06-23', '0.0068'), ('2020-06-24', '0.0081'), ('2020-06-25', '0.0164'), ('2020-06-26', '0.0087'), ('2020-06-27', '0.0071'), ('2020-06-28', '0.0139'), ('2020-06-29', '0.0085'), ('2020-06-30', '0.0066'), ('2020-07-01', '0.0074'), ('2020-07-02', '0.013'), ('2020-07-03', '0.0033'), ('2020-07-04', '0.0044'), ('2020-07-05', '0.0086'), ('2020-07-06', '0.0066'), ('2020-07-07', '0.0061'), ('2020-07-08', '0.005'), ('2020-07-09', '0.0055'), ('2020-07-10', '0.0135'), ('2020-07-11', '0.0114'), ('2020-07-12', '0.0058'), ('2020-07-13', '0.0063'), ('2020-07-14', '0.0058'), ('2020-07-15', '0.0077'), ('2020-07-16', '0.0065'), ('2020-07-17', '0.0072'), ('2020-07-18', '0.005'), ('2020-07-19', '0.0047'), ('2020-07-20', '0.0094'), ('2020-07-21', '0.0028'), ('2020-07-22', '0.0066'), ('2020-07-23', '0.0113'), ('2020-07-24', '0.0039'), ('2020-07-25', '0.0128'), ('2020-07-26', '0.013'), ('2020-07-27', '0.0081'), ('2020-07-28', '0.0077'), ('2020-07-29', '0.0055'), ('2020-07-30', '0.0046'), ('2020-07-31', '0.0119')]\n","--------------------\n","ETH Tone Before\n","[('2019-11-01', 1.2513), ('2019-11-02', 1.2645), ('2019-11-03', -0.3215), ('2019-11-04', 0.9798), ('2019-11-05', 1.5495), ('2019-11-06', 1.3579), ('2019-11-07', 1.1797), ('2019-11-08', 1.8269), ('2019-11-09', 1.0185), ('2019-11-10', 0.659), ('2019-11-11', 0.7689), ('2019-11-12', 0.7374), ('2019-11-13', 1.5727), ('2019-11-14', 0.4224), ('2019-11-15', 0.4449), ('2019-11-16', 0.7151), ('2019-11-17', 0.0257), ('2019-11-18', 1.3127), ('2019-11-19', 1.1645), ('2019-11-20', 0.9146), ('2019-11-21', 0.6858), ('2019-11-22', -0.7551), ('2019-11-23', -2.5185), ('2019-11-24', 0.0748), ('2019-11-25', -0.5951), ('2019-11-26', 0.2805), ('2019-11-27', -0.2971), ('2019-11-28', 0.7527), ('2019-11-29', -0.6188), ('2019-11-30', -1.1378), ('2019-12-01', -1.0037), ('2019-12-02', 0.4437), ('2019-12-03', -0.5199), ('2019-12-04', 0.7409), ('2019-12-05', 0.6301), ('2019-12-06', 0.8982), ('2019-12-07', 0.8013), ('2019-12-08', 1.0872), ('2019-12-09', 0.2731), ('2019-12-10', 0.3878), ('2019-12-11', 0.4808), ('2019-12-12', 0.9234), ('2019-12-13', 0.7073), ('2019-12-14', 0.1254), ('2019-12-15', 0.4802), ('2019-12-16', 0.6397), ('2019-12-17', 0.8645), ('2019-12-18', 0.2164), ('2019-12-19', 0.8571), ('2019-12-20', 0.7234), ('2019-12-21', 0.3804), ('2019-12-22', -0.5368), ('2019-12-23', 0.5011), ('2019-12-24', 0.0317), ('2019-12-25', 0.6625), ('2019-12-26', -0.4272), ('2019-12-27', -0.1239), ('2019-12-28', 0.3281), ('2019-12-29', -0.2767), ('2019-12-30', 0.2709), ('2019-12-31', -0.6463), ('2020-01-01', 0.3808), ('2020-01-02', 0.2333), ('2020-01-03', 0.7449), ('2020-01-04', 0.256), ('2020-01-05', -0.0937), ('2020-01-06', -0.9656), ('2020-01-07', 0.5981), ('2020-01-08', 0.7591), ('2020-01-09', 0.3596), ('2020-01-10', -0.1147), ('2020-01-11', 0.6213), ('2020-01-12', 1.127), ('2020-01-13', 1.2618), ('2020-01-14', 0.461), ('2020-01-15', 0.1283), ('2020-01-16', -0.1274), ('2020-01-17', 0.0034), ('2020-01-18', 0.1732), ('2020-01-19', 0.5368), ('2020-01-20', 0.3702), ('2020-01-21', 1.0965), ('2020-01-22', 0.9971), ('2020-01-23', 1.2388), ('2020-01-24', 0.727), ('2020-01-25', 0.1696), ('2020-01-26', -0.2458), ('2020-01-27', 0.6581), ('2020-01-28', 1.179), ('2020-01-29', 0.9628), ('2020-01-30', 0.9619), ('2020-01-31', -0.3001)]\n","ETH Tone After\n","[('2020-05-01', 0.5634), ('2020-05-02', 0.4334), ('2020-05-03', 2.1245), ('2020-05-04', 0.7955), ('2020-05-05', 1.5685), ('2020-05-06', 1.1983), ('2020-05-07', 1.0714), ('2020-05-08', 0.1709), ('2020-05-09', 2.0847), ('2020-05-10', -0.9271), ('2020-05-11', -0.1535), ('2020-05-12', 1.6552), ('2020-05-13', 0.5811), ('2020-05-14', -0.0797), ('2020-05-15', 0.8517), ('2020-05-16', -0.0013), ('2020-05-17', -1.0818), ('2020-05-18', 1.6324), ('2020-05-19', -0.2248), ('2020-05-20', 0.9455), ('2020-05-21', 1.4481), ('2020-05-22', -0.2952), ('2020-05-23', -0.3832), ('2020-05-24', -1.1291), ('2020-05-25', -0.8764), ('2020-05-26', 2.318), ('2020-05-27', 1.239), ('2020-05-28', 0.576), ('2020-05-29', 1.632), ('2020-05-30', 0.7796), ('2020-05-31', -0.331), ('2020-06-01', 0.5316), ('2020-06-02', 0.0833), ('2020-06-03', 0.1255), ('2020-06-04', 0.1221), ('2020-06-05', 0.678), ('2020-06-06', 0.392), ('2020-06-07', -0.5908), ('2020-06-08', 1.3606), ('2020-06-09', 0.9347), ('2020-06-10', 0.7943), ('2020-06-11', 2.8159), ('2020-06-12', 0.5894), ('2020-06-13', -1.5228), ('2020-06-14', 0.8127), ('2020-06-15', -0.0707), ('2020-06-16', 0.5749), ('2020-06-17', -0.0494), ('2020-06-18', 0.3066), ('2020-06-19', 0.0226), ('2020-06-20', 0.0054), ('2020-06-21', 0.1715), ('2020-06-22', 0.2786), ('2020-06-23', 0.754), ('2020-06-24', 0.8914), ('2020-06-25', 0.6504), ('2020-06-26', 0.9494), ('2020-06-27', 0.2678), ('2020-06-28', 1.1343), ('2020-06-29', 0.1859), ('2020-06-30', 0.6747), ('2020-07-01', 0.4482), ('2020-07-02', 1.1059), ('2020-07-03', -0.0696), ('2020-07-04', 0.3054), ('2020-07-05', 0.768), ('2020-07-06', -0.1216), ('2020-07-07', 0.9006), ('2020-07-08', 0.4359), ('2020-07-09', -0.0959), ('2020-07-10', 1.9433), ('2020-07-11', 1.5804), ('2020-07-12', -0.6189), ('2020-07-13', 0.2786), ('2020-07-14', 1.0163), ('2020-07-15', 0.6548), ('2020-07-16', -0.1879), ('2020-07-17', 0.9121), ('2020-07-18', 0.4209), ('2020-07-19', 0.3289), ('2020-07-20', 2.0086), ('2020-07-21', 0.6199), ('2020-07-22', 0.811), ('2020-07-23', 1.8209), ('2020-07-24', 1.2783), ('2020-07-25', -0.1924), ('2020-07-26', 1.2782), ('2020-07-27', 0.6171), ('2020-07-28', 0.5445), ('2020-07-29', 0.5963), ('2020-07-30', 0.5727), ('2020-07-31', 0.4374)]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","#Getting only the Values in the Dataframe to convert into int for Consine Similarity\n","BTCVolumeValueB = BTC_Volumebeforedata.rdd.map(lambda row: (row['Value']))\n","BTCVolumeValueA = BTC_Volumeafterdata.rdd.map(lambda row: (row['Value']))\n","print(\"BTCVolumeValueA\")\n","dbg(BTCVolumeA)\n","BTCToneValueB = BeforeTone_Value(BTC_Tonebeforedata)\n","BTCToneValueA = AfterTone_Value(BTC_Toneafterdata)\n","print(\"BTCToneValueA\")\n","dbg(BTCToneValueA)\n","\n","\n","#Getting only the Values in the Dataframe to convert into int for Consine Similarity\n","ETHVolumeValueB = ETH_Volumebeforedata.rdd.map(lambda row: (row['Value']))\n","ETHVolumeValueA =  ETH_Volumeafterdata.rdd.map(lambda row: (row['Value']))\n","ETHToneValueB = BeforeTone_Value(ETH_Tonebeforedata)\n","ETHToneValueA = AfterTone_Value(ETH_Toneafterdata)\n","\n"],"metadata":{"id":"kZJv2V7fIr10","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654228855464,"user_tz":-720,"elapsed":360,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"de5969f8-c528-4a03-878f-7fc42b5f91a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BTCVolumeValueA\n","[('2020-05-01', '0.0212'), ('2020-05-02', '0.0283'), ('2020-05-03', '0.013'), ('2020-05-04', '0.0173'), ('2020-05-05', '0.0192'), ('2020-05-06', '0.0165'), ('2020-05-07', '0.0197'), ('2020-05-08', '0.0478'), ('2020-05-09', '0.0354'), ('2020-05-10', '0.0174'), ('2020-05-11', '0.0358'), ('2020-05-12', '0.031'), ('2020-05-13', '0.0235'), ('2020-05-14', '0.0168'), ('2020-05-15', '0.0197'), ('2020-05-16', '0.0167'), ('2020-05-17', '0.0188'), ('2020-05-18', '0.0294'), ('2020-05-19', '0.0207'), ('2020-05-20', '0.0211'), ('2020-05-21', '0.0199'), ('2020-05-22', '0.02'), ('2020-05-23', '0.017'), ('2020-05-24', '0.0135'), ('2020-05-25', '0.0254'), ('2020-05-26', '0.0269'), ('2020-05-27', '0.0197'), ('2020-05-28', '0.019'), ('2020-05-29', '0.0183'), ('2020-05-30', '0.0117'), ('2020-05-31', '0.0114'), ('2020-06-01', '0.0233'), ('2020-06-02', '0.0288'), ('2020-06-03', '0.0226'), ('2020-06-04', '0.0265'), ('2020-06-05', '0.0194'), ('2020-06-06', '0.0178'), ('2020-06-07', '0.0159'), ('2020-06-08', '0.0167'), ('2020-06-09', '0.0225'), ('2020-06-10', '0.0304'), ('2020-06-11', '0.0301'), ('2020-06-12', '0.0296'), ('2020-06-13', '0.0218'), ('2020-06-14', '0.0398'), ('2020-06-15', '0.0227'), ('2020-06-16', '0.0187'), ('2020-06-17', '0.018'), ('2020-06-18', '0.0187'), ('2020-06-19', '0.016'), ('2020-06-20', '0.0104'), ('2020-06-21', '0.0148'), ('2020-06-22', '0.0247'), ('2020-06-23', '0.0211'), ('2020-06-24', '0.0219'), ('2020-06-25', '0.0249'), ('2020-06-26', '0.0208'), ('2020-06-27', '0.017'), ('2020-06-28', '0.0227'), ('2020-06-29', '0.0191'), ('2020-06-30', '0.0341'), ('2020-07-01', '0.019'), ('2020-07-02', '0.0212'), ('2020-07-03', '0.0159'), ('2020-07-04', '0.0171'), ('2020-07-05', '0.0171'), ('2020-07-06', '0.021'), ('2020-07-07', '0.0314'), ('2020-07-08', '0.0197'), ('2020-07-09', '0.0181'), ('2020-07-10', '0.0238'), ('2020-07-11', '0.0214'), ('2020-07-12', '0.0166'), ('2020-07-13', '0.02'), ('2020-07-14', '0.021'), ('2020-07-15', '0.049'), ('2020-07-16', '0.1233'), ('2020-07-17', '0.0328'), ('2020-07-18', '0.1047'), ('2020-07-19', '0.0192'), ('2020-07-20', '0.0291'), ('2020-07-21', '0.0181'), ('2020-07-22', '0.0197'), ('2020-07-23', '0.0244'), ('2020-07-24', '0.0178'), ('2020-07-25', '0.0179'), ('2020-07-26', '0.0291'), ('2020-07-27', '0.0225'), ('2020-07-28', '0.0324'), ('2020-07-29', '0.021'), ('2020-07-30', '0.0217'), ('2020-07-31', '0.025')]\n","BTCToneValueA\n","[0.4852, 0.8262, 0.7438, -0.7068, 1.1457, 0.7595, 0.5387, 0.6226, 1.238, -1.0679, -0.504, 0.2032, 1.0953, 0.2903, -0.3546, -0.0374, -1.0781, 0.797, 0.0632, -0.0455, -0.3013, -0.4272, -0.3728, -0.9223, 0.2003, 0.995, 0.4573, 0.4712, 0.7427, -0.436, -0.8716, -0.035, -0.8599, -0.4204, -0.9137, -0.3488, -0.2396, -0.4961, -0.5175, 0.1652, 0.451, 0.7544, -0.5256, 0.4492, 0.2979, -0.3846, 0.3799, -0.1459, 0.4504, -0.1574, -0.3069, -0.6366, -0.1203, 0.6547, -0.0217, 1.3017, -0.5124, -0.8244, 0.2399, -0.7081, 0.0619, 0.3073, 0.4096, -1.2207, 0.1088, -0.091, -0.0905, 1.0197, 0.2818, -0.834, 0.817, 0.8128, -0.9072, -0.7299, 0.3027, -1.9204, -3.3072, -1.323, -3.9835, -2.4894, -0.3984, -0.5839, -0.4153, -1.6334, -0.6094, -0.1156, 0.5617, 0.565, 1.5408, 0.7509, 0.6693, -0.8462]\n"]}]},{"cell_type":"markdown","source":["##Consine Similarity BTC Before/After and ETH Before/After\n","\n","**Using changeint() function to convert string values to float value to be used in consine_similarity().**"],"metadata":{"id":"vMnB0do5AKcD"}},{"cell_type":"code","source":["import math\n","\n","def changeint(x):\n","  for i in range(len(x)):\n","      x[i] = float(x[i])\n","  return x\n","\n","def cosine_similarity(x, y):\n","  count = 0\n","  list1 = 0\n","  list2 = 0\n","  for i in range(len(x)):\n","    count += x[i] * y[i]\n","    list1 += x[i]**2\n","    list2 += y[i]**2\n","  return count / (math.sqrt(list1) * math.sqrt(list2))\n","\n","BTCBeforeCovid = cosine_similarity(changeint(BTCVolumeValueB.collect()), changeint(BTCToneValueB.collect()))\n","BTCAfterCovid = cosine_similarity(changeint(BTCVolumeValueA.collect()), changeint(BTCToneValueA.collect()))\n","\n","ETHBeforeCovid = cosine_similarity(changeint(ETHVolumeValueB.collect()), changeint(ETHToneValueB.collect()))\n","ETHAfterCovid = cosine_similarity(changeint(ETHVolumeValueA.collect()), changeint(ETHToneValueA.collect()))\n","\n","print(\"BTC before -> BTC after\")\n","print(str(BTCBeforeCovid) + \" -> \" + str(BTCAfterCovid))\n","print('-'*20)\n","print(\"ETH before -> ETH after\")\n","print(str(ETHBeforeCovid) + \" -> \" + str(ETHAfterCovid))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P9X7uTiDMrJ4","executionInfo":{"status":"ok","timestamp":1654228856742,"user_tz":-720,"elapsed":1280,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"66fe08be-82ea-4278-e75e-b6dddd1bdade"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["BTC before -> BTC after\n","-0.04991972227502535 -> -0.3555252050654841\n","--------------------\n","ETH before -> ETH after\n","0.43268649490725497 -> 0.6576851903244306\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","BTC = [\"Before Covid outbreak\", \"After Covid outbreak\"]\n","BTCresult = [BTCBeforeCovid, BTCAfterCovid]\n","\n","plt.bar(BTC, BTCresult)\n","plt.title('BTC Popularity Before & After Covid outbreak')\n","plt.ylabel('Cosine Similarity')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"tJqpW61a7nMG","executionInfo":{"status":"ok","timestamp":1654228857150,"user_tz":-720,"elapsed":420,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"7f429c8f-433d-428f-8bbc-e1b84f0aeadf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","ETH = [\"Before Covid outbreak\", \"After Covid outbreak\"]\n","ETHresult = [ETHBeforeCovid, ETHAfterCovid]\n","\n","plt.bar(ETH, ETHresult)\n","plt.title('ETH Popularity Before & After Covid outbreak')\n","plt.ylabel('Cosine Similarity')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"qrTIjw5s8o7a","executionInfo":{"status":"ok","timestamp":1654228857160,"user_tz":-720,"elapsed":32,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"d95ceabe-673d-43a2-d144-a2e43f6d9a1f"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Google Cloud Section\n","**Reading all csv as pandas and map it with rdd to get only the values. This will be used to time it with a few different numbers of cores in google cloud (Data will be presented in the report).**"],"metadata":{"id":"p0YnIU5KxcuW"}},{"cell_type":"code","source":["BTC_Volumeafterdata = pd.read_csv(\"BitcoinVolumeAfter.csv\")\n","BTC_Volumebeforedata = pd.read_csv(\"BitcoinVolumeBefore.csv\")\n","BTC_Tonebeforedata = pd.read_csv(\"BTCToneBefore.csv\")\n","BTC_Toneafterdata = pd.read_csv(\"BTCToneAfter.csv\")\n","\n","ETH_Volumeafterdata = pd.read_csv(\"ETHVolumeAfter.csv\")\n","ETH_Volumebeforedata = pd.read_csv(\"ETHVolumeBefore.csv\")\n","ETH_Tonebeforedata = pd.read_csv(\"ETHToneBefore.csv\")\n","ETH_Toneafterdata = pd.read_csv(\"ETHToneAfter.csv\")"],"metadata":{"id":"_XbKvvjlwpqj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def Filter_value(x):\n","  crypto = x.loc[('2020-05-01' == x['Date']).idxmax(): ('2020-07-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  return crypto"],"metadata":{"id":"LZ1aGRcdyCf6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","#Both Volume Dataset (BTC and ETH) already filtered from previous code and will be used in Google cloud\n","BTC_Tonebeforedatafiltered = Filter_value(BTC_Tonebeforedata).to_csv(\"BTCToneBeforeFiltered.csv\")\n","BTC_Toneafterdatafiltered = Filter_value(BTC_Toneafterdata).to_csv(\"BTCToneAfterFiltered.csv\")\n","\n","ETH_Tonebeforedatafiltered = Filter_value(ETH_Tonebeforedata).to_csv(\"ETHToneBeforeFiltered.csv\")\n","ETH_Toneafterdatafiltered = Filter_value(ETH_Tonebeforedata).to_csv(\"ETHToneAfterFiltered.csv\")\n","\n","\n","# BTC_Volumeafterdata = BTC_Volumeafterdata.rdd.map(lambda x: x['Value'])\n","# BTC_Volumebeforedata = BTC_Volumebeforedata.rdd.map(lambda x: x['Value'])\n","# BTC_Tonebeforedata = Filter_value(BTC_Tonebeforedata).rdd.map(lambda x: x['Value'])\n","# BTC_Toneafterdata = Filter_value(BTC_Tonebeforedata).rdd.map(lambda x: x['Value'])\n","\n","# ETH_Volumeafterdata = ETH_Volumeafterdata.rdd.map(lambda x: x['Value'])\n","# ETH_Volumebeforedata = ETH_Volumebeforedata.rdd.map(lambda x: x['Value'])\n","# ETH_Tonebeforedata = Filter_value(ETH_Tonebeforedata).rdd.map(lambda x: x['Value'])\n","# ETH_Toneafterdata = Filter_value(ETH_Toneafterdata).rdd.map(lambda x: x['Value'])"],"metadata":{"id":"6dQiKjcryTQO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Graphing Results\n","**Visualising the data using Plots to compare before and after result in the final report**"],"metadata":{"id":"XWFMmwR9x1Uj"}},{"cell_type":"code","source":["import pandas as pd\n","from pyspark.sql import SQLContext\n","sqlContext = SQLContext(sc)\n","\n","btcvolumeafter = sqlContext.read.option(\"header\", \"true\").csv(\"BitcoinVolumeAfter.csv\")\n","btcvolumebefore = sqlContext.read.option(\"header\", \"true\").csv(\"BitcoinVolumeBefore.csv\")\n","btctonebefore = pd.read_csv(\"BTCToneBefore.csv\")\n","btctoneafter = pd.read_csv(\"BTCToneAfter.csv\")\n","\n","ethvolumeafter = sqlContext.read.option(\"header\", \"true\").csv(\"ETHVolumeAfter.csv\")\n","ethvolumebefore = sqlContext.read.option(\"header\", \"true\").csv(\"ETHVolumeBefore.csv\")\n","ethtonebefore = pd.read_csv(\"ETHToneBefore.csv\")\n","ethtoneafter = pd.read_csv(\"ETHToneAfter.csv\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iCKqBvql0gYa","executionInfo":{"status":"ok","timestamp":1654228857872,"user_tz":-720,"elapsed":737,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"4cdfc3ce-de34-4ec5-e438-ec11ab01fa11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/pyspark/sql/context.py:79: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n","  FutureWarning\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","def changeint(x):\n","  for i in range(len(x)):\n","      x[i] = float(x[i])\n","  return x\n","\n","def BeforeTone_Value(x):\n","  crypto = x.loc[('2019-11-01' == x['Date']).idxmax(): ('2020-01-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Value']))\n","  return crypto\n","  \n","def AfterTone_Value(x):\n","  crypto = x.loc[('2020-05-01' == x['Date']).idxmax(): ('2020-07-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Value']))\n","  return crypto\n","\n","def BeforeTone_Date(x):\n","  crypto = x.loc[('2019-11-01' == x['Date']).idxmax(): ('2020-01-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Date']))\n","  return crypto\n","  \n","def AfterTone_Date(x):\n","  crypto = x.loc[('2020-05-01' == x['Date']).idxmax(): ('2020-07-31' == x['Date']).idxmax()].reset_index(drop=True)\n","  crypto = spark.createDataFrame(crypto, ['Date', 'Series', 'Value']) \n","  crypto = crypto.rdd.map(lambda row: (row['Date']))\n","  return crypto\n"],"metadata":{"id":"3OATrmFJ5hnn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Graph for BTC volume before covid"],"metadata":{"id":"nrtuJuhK7dnn"}},{"cell_type":"code","source":["\n","BTCBeforeValue = btcvolumebefore.rdd.map(lambda row: (row['Value']))\n","BTCBeforeDate = btcvolumebefore.rdd.map(lambda row: (row['Date']))\n","# dbg(changeint(BTCBeforeValue.collect()))\n","# dbg(BTCBeforeDate)\n","\n","plt.scatter(BTCBeforeDate.collect(), changeint(BTCBeforeValue.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"Volume of BTC Mentions before covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (Nov 01 2019 - Jan 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Volume (Mentions)\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"hFjZzOvzx3_z","executionInfo":{"status":"ok","timestamp":1654228859203,"user_tz":-720,"elapsed":1334,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"709f0606-a78a-4037-df06-7a301eb5e5c0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for BTC volume after covid\n","\n","\n"],"metadata":{"id":"lWuhvxgy73bT"}},{"cell_type":"code","source":["\n","BTCAfterValue = btcvolumeafter.rdd.map(lambda row: (row['Value']))\n","BTCAfterDate = btcvolumeafter.rdd.map(lambda row: (row['Date']))\n","# dbg(changeint(BTCAfterValue.collect()))\n","# dbg(BTCBeforeDate)\n","\n","plt.scatter(BTCAfterDate.collect(), changeint(BTCAfterValue.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"Volume of BTC Mentions after covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (May 01 2020 - Jun 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Volume (Mentions)\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"jMs6J80W77ar","executionInfo":{"status":"ok","timestamp":1654228860960,"user_tz":-720,"elapsed":1763,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"66217d92-127a-4dcd-aef8-720ec786e281"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for BTC tone before covid"],"metadata":{"id":"nRu31jeN8urZ"}},{"cell_type":"code","source":["BTCBeforeTone = BeforeTone_Value(btctonebefore)\n","BTCBeforeToneDate = BeforeTone_Date(btctonebefore)\n","# dbg(changeint(BTCBeforeTone.collect()))\n","# dbg(BTCBeforeToneDate)\n","\n","plt.scatter(BTCBeforeToneDate.collect(), changeint(BTCBeforeTone.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"BTC Tone before covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (Nov 01 2019 - Jan 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Tone\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"i99ijYEJ86qw","executionInfo":{"status":"ok","timestamp":1654228862036,"user_tz":-720,"elapsed":1082,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"9b6aff17-60f9-41df-c40e-2e999b12eaa6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for BTC tone after covid"],"metadata":{"id":"e4H1iziE_uKo"}},{"cell_type":"code","source":["BTCAfterTone = AfterTone_Value(btctoneafter)\n","BTCAfterToneDate = AfterTone_Date(btctoneafter)\n","# dbg(changeint(BTCAfterTone.collect()))\n","# dbg(BTCAfterToneDate)\n","\n","plt.scatter(BTCAfterToneDate.collect(), changeint(BTCAfterTone.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"BTC Tone after covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (May 01 2020 - Jun 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Tone\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"vTfzIdjy-2Do","executionInfo":{"status":"ok","timestamp":1654228863214,"user_tz":-720,"elapsed":1196,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"460c7105-2cd4-4a10-a447-a34b8b8a8137"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for ETH volume before covid"],"metadata":{"id":"4ou5GlCQ_y4X"}},{"cell_type":"code","source":["ETHBeforeValue = ethvolumebefore.rdd.map(lambda row: (row['Value']))\n","ETHBeforeDate = ethvolumebefore.rdd.map(lambda row: (row['Date']))\n","# dbg(changeint(ETHBeforeValue.collect()))\n","# dbg(ETHBeforeDate)\n","\n","plt.scatter(ETHBeforeDate.collect(), changeint(ETHBeforeValue.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"Volume of ETH Mentions before covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (Nov 01 2019 - Jan 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Volume (Mentions)\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"id":"sdeuuQxI_3T2","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1654228864603,"user_tz":-720,"elapsed":1409,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"1cdb7ffa-f281-48c2-ff45-4c86e3b0d4ac"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for ETH volume after covid"],"metadata":{"id":"-2aFTtyO_3tO"}},{"cell_type":"code","source":["ETHAfterValue = ethvolumeafter.rdd.map(lambda row: (row['Value']))\n","ETHAfterDate = ethvolumeafter.rdd.map(lambda row: (row['Date']))\n","# dbg(changeint(ETHAfterValue.collect()))\n","# dbg(ETHAfterDate)\n","\n","plt.scatter(ETHAfterDate.collect(), changeint(ETHAfterValue.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"Volume of ETH Mentions after covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (May 01 2020 - Jun 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Volume (Mentions)\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"id":"M9qS8DLv_3_l","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1654228866539,"user_tz":-720,"elapsed":1945,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"8e226f8d-f0c8-43cb-d37d-0acfd7ecd957"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for ETH tone before covid"],"metadata":{"id":"pC2fncJ1_5SO"}},{"cell_type":"code","source":["ETHBeforeTone = BeforeTone_Value(ethtonebefore)\n","ETHBeforeToneDate = BeforeTone_Date(ethtonebefore)\n","# dbg(changeint(ETHBeforeTone.collect()))\n","# dbg(ETHBeforeToneDate)\n","\n","plt.scatter(ETHBeforeToneDate.collect(), changeint(ETHBeforeTone.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"ETH Tone before covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (Nov 01 2019 - Jan 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Tone\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"id":"avb5hXC7_5ge","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1654228868187,"user_tz":-720,"elapsed":1655,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"df52ba66-5535-4bfd-ab0d-2cf135801e43"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["###Graph for ETH tone before covid"],"metadata":{"id":"vgpjL-SF_5qd"}},{"cell_type":"code","source":["ETHAfterTone = AfterTone_Value(ethtoneafter)\n","ETHAfterToneDate = AfterTone_Date(ethtoneafter)\n","# dbg(changeint(ETHAfterTone.collect()))\n","# dbg(ETHAfterToneDate)\n","\n","plt.scatter(ETHAfterToneDate.collect(), changeint(ETHAfterTone.collect()))\n","\n","font1 = {'family':'serif','color':'blue','size':14}\n","font2 = {'family':'serif','color':'black','size':10}\n","\n","plt.title(\"ETH Tone after covid outbreak\", fontdict = font1, loc = 'left')\n","plt.xlabel(\"Date (May 01 2020 - Jun 31 2020)\", fontdict = font2)\n","plt.ylabel(\"Tone\", fontdict = font2)\n","\n","plt.show()"],"metadata":{"id":"vhu9TV9h_51V","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1654228869704,"user_tz":-720,"elapsed":1523,"user":{"displayName":"Tawatchai Holmes","userId":"09220768393347212165"}},"outputId":"b2658ff9-bc36-4255-a0be-188c576702ff"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"IF8dMe76uUXG"},"execution_count":null,"outputs":[]}]}